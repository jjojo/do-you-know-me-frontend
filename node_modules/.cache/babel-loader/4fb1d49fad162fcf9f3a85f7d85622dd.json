{"ast":null,"code":"var _jsxFileName = \"/Users/Jonas/Development/Web/testGame/test-game/src/game-screen/gameScreen.js\";\nimport React, { useEffect, useContext } from 'react';\nimport { State } from '../store';\nimport { socket } from '../App';\nimport LeavRoom from '../leave-room/leaveRoom';\nimport './gameScreen.scss';\nimport Question from './question/question';\n\nconst GameScreen = () => {\n  const _useContext = useContext(State),\n        state = _useContext.state,\n        dispatch = _useContext.dispatch;\n\n  useEffect(() => {\n    createGame((state.gameState || {}).room);\n    socket.on('gameCreated', gameState => {\n      console.log('GAME CREATED: ', gameState);\n      dispatch({\n        type: 'UPDATE_GAME_STATE',\n        payload: gameState\n      });\n    });\n    socket.on('gameUpdate', gameState => {\n      console.log('GAME STATE UPDATED: ', gameState);\n      dispatch({\n        type: 'UPDATE_GAME_STATE',\n        payload: gameState\n      });\n      requestAnimationFrame();\n    });\n  }, []);\n\n  const fullScreen = () => {\n    document.getElementById(\"game-screen\").requestFullscreen();\n  };\n\n  const createGame = room => {\n    socket.emit('createGame', room);\n  };\n\n  const getPlayers = () => {\n    return state.gameState.players.map(playerId => state.gameState[playerId]);\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, state.gameState && React.createElement(\"div\", {\n    id: \"game-screen\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, state.gameState.gameStarted && React.createElement(\"game-count-down\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, state.gameState.gameStartCountDown), React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, state.gameState.name || 'Game room loading', React.createElement(LeavRoom, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Room number: \", state.gameState.room), React.createElement(\"button\", {\n    onClick: () => fullScreen(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"fullscreen\")), React.createElement(\"main\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, state.gameState && getPlayers().map(player => {\n    return player && React.createElement(\"section\", {\n      style: {\n        backgroundColor: player.color\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, player.questions.map((question, i) => {\n      return React.createElement(Question, {\n        question: question,\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      });\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, player.emoji), player.username));\n  })), React.createElement(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, JSON.stringify(state.gameState, null, \"  \"))));\n};\n\nexport default GameScreen;","map":{"version":3,"sources":["/Users/Jonas/Development/Web/testGame/test-game/src/game-screen/gameScreen.js"],"names":["React","useEffect","useContext","State","socket","LeavRoom","Question","GameScreen","state","dispatch","createGame","gameState","room","on","console","log","type","payload","requestAnimationFrame","fullScreen","document","getElementById","requestFullscreen","emit","getPlayers","players","map","playerId","gameStarted","gameStartCountDown","name","player","backgroundColor","color","questions","question","i","emoji","username","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext} from 'react';\nimport { State } from '../store'\nimport {socket} from '../App';\nimport LeavRoom from '../leave-room/leaveRoom';\nimport './gameScreen.scss';\nimport Question from './question/question';\n\nconst GameScreen = () => {\n  const { state, dispatch } = useContext(State)\n\n  useEffect(() => {\n    createGame((state.gameState || {}).room)\n    socket.on('gameCreated', (gameState) => {\n      console.log('GAME CREATED: ', gameState)\n      dispatch({type: 'UPDATE_GAME_STATE', payload: gameState})\n    })\n\n    socket.on('gameUpdate', (gameState) => {\n      console.log('GAME STATE UPDATED: ', gameState)\n      dispatch({type: 'UPDATE_GAME_STATE', payload: gameState})\n      requestAnimationFrame()\n    })\n  }, [])\n\n  const fullScreen = () => {\n    document.getElementById(\"game-screen\").requestFullscreen();\n  }\n\n  const createGame = (room) => {\n    socket.emit('createGame', room);\n  }\n\n  const getPlayers = () => {\n    return state.gameState.players.map(playerId => state.gameState[playerId])\n  }\n  \n  return (<React.Fragment>{ state.gameState &&\n    <div id={\"game-screen\"}>\n      {state.gameState.gameStarted && \n        <game-count-down>\n          {state.gameState.gameStartCountDown}\n        </game-count-down>}\n      <header>\n        <h1>\n          {state.gameState.name || 'Game room loading'} \n          <LeavRoom></LeavRoom>\n        </h1>\n        <h3>Room number: {state.gameState.room}</h3>\n        <button onClick={() => fullScreen()}>fullscreen</button>\n      </header>\n      <main>\n        {state.gameState && getPlayers().map((player) => {\n          return player && (\n            <section style={{backgroundColor: player.color}}>\n              <div>\n                {player.questions.map((question, i) => {\n                  return <Question question={question} key={i}></Question>\n                })}\n              </div>\n              <p>\n                <span>{player.emoji}</span>\n                {player.username}\n              </p>\n            </section>\n          )\n        })}\n      </main>\n      <pre>\n        {JSON.stringify(state.gameState, null, \"  \")}\n      </pre>\n    </div>\n  }</React.Fragment>)\n}\n\nexport default GameScreen;"]},"metadata":{},"sourceType":"module"}