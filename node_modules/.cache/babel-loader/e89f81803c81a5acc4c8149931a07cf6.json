{"ast":null,"code":"import _slicedToArray from \"/Users/Jonas/Development/Web/testGame/test-game/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Jonas/Development/Web/testGame/test-game/src/game-controller/gameController.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { State } from '../store';\nimport { socket } from '../App';\nimport './gameController.scss';\nimport LeavRoom from '../leave-room/leaveRoom';\n\nconst GameController = () => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        username = _useState2[0],\n        setUsername = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        qIndex = _useState4[0],\n        setQIndex = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        questions = _useState6[0],\n        setQuestions = _useState6[1];\n\n  const _useContext = useContext(State),\n        state = _useContext.state,\n        dispatch = _useContext.dispatch;\n\n  useEffect(() => {\n    socket.emit('join', state.gameState.room, state.playerId);\n    socket.on('joinedGame', (gameState, playerId) => {\n      console.log('Joined1');\n      dispatch({\n        type: 'SET_PLAYER_ID',\n        payload: playerId\n      });\n      dispatch({\n        type: 'UPDATE_GAME_STATE',\n        payload: gameState\n      });\n    });\n    socket.on('pickQuestions', questions => {\n      console.log('QUestions need picking:', questions);\n      setQuestions(questions);\n    });\n    socket.on('gameUpdate', gameState => {\n      console.log('GAME STATE UPDATED: ', gameState);\n      dispatch({\n        type: 'UPDATE_GAME_STATE',\n        payload: gameState\n      });\n    });\n  }, []);\n\n  const sendUsername = username => {\n    console.log(username);\n    socket.emit('setUsername', state.gameState.room, state.playerId, username);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"game-controller\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    style: {\n      backgroundColor: (state.gameState[state.playerId] || {}).color || '#fff'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, state.gameState.name), React.createElement(LeavRoom, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Room: \", state.gameState.room)), state.gameState[state.playerId] && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, state.gameState[state.playerId].emoji, React.createElement(\"input\", {\n    type: \"text\",\n    onChange: e => sendUsername(e.target.value),\n    placeholder: state.gameState[state.playerId].username || 'Username',\n    maxLength: \"20\",\n    autoFocus: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })))), React.createElement(\"main\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"For \", questions.length > 0 && questions[qIndex].points, \" points\"), React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, questions.length > 0 && questions[qIndex].question)), React.createElement(\"footer\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => setQIndex(qIndex + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"reject\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"\\u274C\")), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"\\u2705\")));\n};\n\nexport default GameController;","map":{"version":3,"sources":["/Users/Jonas/Development/Web/testGame/test-game/src/game-controller/gameController.js"],"names":["React","useContext","useState","useEffect","State","socket","LeavRoom","GameController","username","setUsername","qIndex","setQIndex","questions","setQuestions","state","dispatch","emit","gameState","room","playerId","on","console","log","type","payload","sendUsername","backgroundColor","color","name","emoji","e","target","value","length","points","question"],"mappings":"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","sourcesContent":["import React, {useContext, useState, useEffect} from 'react'\nimport { State } from '../store'\nimport {socket} from '../App';\nimport './gameController.scss'\nimport LeavRoom from '../leave-room/leaveRoom';\n\nconst GameController = () => {\n  const [ username, setUsername ] = useState(null)\n  const [ qIndex, setQIndex ] = useState(0)\n  const [ questions, setQuestions ] = useState([])\n  const { state, dispatch } = useContext(State)\n\n  useEffect(() => {\n    socket.emit('join', state.gameState.room, state.playerId);\n\n    socket.on('joinedGame', (gameState, playerId) => {\n      console.log('Joined1')\n      dispatch({type: 'SET_PLAYER_ID', payload: playerId})\n      dispatch({type: 'UPDATE_GAME_STATE', payload: gameState})\n    })\n    \n    socket.on('pickQuestions', (questions) => {\n      console.log('QUestions need picking:', questions)\n      setQuestions(questions);\n    })\n\n    socket.on('gameUpdate', (gameState) => {\n      console.log('GAME STATE UPDATED: ', gameState)\n      dispatch({type: 'UPDATE_GAME_STATE', payload: gameState})\n    })\n  }, [])\n\n  const sendUsername = (username) => {\n    console.log(username)\n    socket.emit('setUsername', state.gameState.room, state.playerId, username)\n  }\n\n  return (\n    <div className=\"game-controller\">\n      <header style={{backgroundColor: (state.gameState[state.playerId] || {}).color || '#fff'}}>\n        <h2>\n          <span>{state.gameState.name}</span>\n          <LeavRoom></LeavRoom>\n          <span>\n            Room: {state.gameState.room}\n          </span>\n        </h2>\n        {state.gameState[state.playerId] && <React.Fragment>\n          <span>\n            {state.gameState[state.playerId].emoji}\n            <input \n              type=\"text\" \n              onChange={(e) => sendUsername(e.target.value)} \n              placeholder={state.gameState[state.playerId].username || 'Username'}\n              maxLength=\"20\"\n              autoFocus/>\n          </span>\n        </React.Fragment>}\n      </header>\n      <main>\n        <h2>For {questions.length > 0 && questions[qIndex].points} points</h2>\n        <h1>{questions.length > 0 && questions[qIndex].question}</h1>\n      </main>\n      <footer>\n        <button onClick={() => setQIndex(qIndex + 1)}>\n          <span role=\"img\" aria-label=\"reject\">❌</span>\n        </button>\n        <button>✅</button>\n      </footer>\n    </div>\n  )\n}\n\nexport default GameController;"]},"metadata":{},"sourceType":"module"}